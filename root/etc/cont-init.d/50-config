#!/usr/bin/with-contenv bash

# check to make sure that the required variables are set
# shellcheck disable=SC2153
if [ -z "$URL" ]; then
  echo "Please pass your URL as an environment variable in your docker run command. See docker info for more details."
  exit 1
fi

# make our folders and links
mkdir -p \
	/config/{log/letsencrypt,log/fail2ban,etc/letsencrypt,fail2ban,crontabs,cache,distribute/XX.XX.XX.XX} \
	/var/run/fail2ban
rm -rf /etc/letsencrypt
ln -s /config/etc/letsencrypt /etc/letsencrypt

# copy config files
[[ ! -f /etc/fail2ban/jail.local ]] && \
	cp -R /etc/fail2ban/filter.d /config/fail2ban/ && \
	cp -R /etc/fail2ban/action.d /config/fail2ban/
[[ ! -f /config/fail2ban/jail.local ]] && \
	cp /defaults/jail.local /config/fail2ban/jail.local
[[ ! -d /config/fail2ban/filter.d ]] && \
	cp -R /etc/fail2ban/filter.d /config/fail2ban/
[[ ! -d /config/fail2ban/action.d ]] && \
	cp -R /etc/fail2ban/action.d /config/fail2ban/
cp -R /config/fail2ban/filter.d/* /etc/fail2ban/filter.d/
cp -R /config/fail2ban/action.d/* /etc/fail2ban/action.d/
cp /config/fail2ban/jail.local /etc/fail2ban/jail.local
[[ ! -f /config/crontabs/root ]] && \
	cp /etc/crontabs/root /config/crontabs/
[[ ! -f /config/nginx/proxy.conf ]] && \
	cp /defaults/proxy.conf /config/nginx/proxy.conf
cp /defaults/{slave.conf,private} /config/distribute/XX.XX.XX.XX/	
[[ ! -f /config/distribute/distribute.sh ]] && \
	cp /defaults/distribute.sh /config/distribute/distribute.sh
chmod +x /app/le-renew.sh /config/distribute/distribute.sh

# import user crontabs
rm /etc/crontabs/*
cp /config/crontabs/* /etc/crontabs/

# create original config file if it doesn't exist
if [ ! -f "/config/donoteditthisfile.conf" ]; then
# shellcheck disable=SC2153
  echo -e "ORIGURL=\"$URL\" ORIGDHLEVEL=\"$DHLEVEL\" ORIGVALIDATOR=\"$VALIDATOR\" ORIGVALIDATORIP=\"$VALIDATORIP\" ORIGSLAVEIPS=\"$SLAVEIPS\"" > /config/donoteditthisfile.conf
fi

# load original config settings
# shellcheck disable=SC1091
. /config/donoteditthisfile.conf

# compare dhparams existence and level, create if necessary
if [ ! "$DHLEVEL" = "$ORIGDHLEVEL" ]; then
  rm -rf /config/nginx/dhparams.pem
  echo "DH parameters bit setting changed. Deleting old dhparams file."
fi

if [ ! -f "/config/nginx/dhparams.pem" ]; then
  echo "Creating DH parameters for additional security. This may take a very long time. There will be another message once this process is completed"
  openssl dhparam -out /config/nginx/dhparams.pem "$DHLEVEL"
  echo "DH parameters successfully created - $DHLEVEL bits"
else
  echo "$ORIGDHLEVEL bit DH parameters present"
fi

# figuring out whether to use e-mail and which
if [[ $EMAIL == *@* ]]; then
  echo "E-mail address entered: ${EMAIL}"
  EMAILPARAM="-m ${EMAIL}"
else
  echo "No e-mail address entered or address invalid"
  EMAILPARAM="--register-unsafely-without-email"
fi

# setting the symlink for key location
rm -rf /config/keys/letsencrypt
ln -s ../etc/letsencrypt/live/"$URL" /config/keys/letsencrypt

# if the server is set to be the validator
if [ "$VALIDATOR" = "true" ]; then
  # checking for changes in cert variables, revoking certs if necessary
  if [ ! "$URL" = "$ORIGURL" ]; then
    echo "Different URL entered than what was used before. Revoking and deleting existing certificate, and an updated one will be created"
    certbot revoke --non-interactive --cert-path /config/etc/letsencrypt/live/"$ORIGURL"/fullchain.pem
    rm -rf /config/etc
    mkdir -p /config/etc/letsencrypt
  fi
  # generating certs if necessary
  if [ ! -f "/config/keys/letsencrypt/fullchain.pem" ]; then
    echo "Generating new certificate"
    certbot certonly --non-interactive --renew-by-default --standalone --rsa-key-size 4096 $EMAILPARAM --agree-tos -d "$URL" && \
    echo -e "ORIGURL=\"$URL\" ORIGDHLEVEL=\"$DHLEVEL\" ORIGVALIDATOR=\"$VALIDATOR\" ORIGVALIDATORIP=\"$VALIDATORIP\" ORIGSLAVEIPS=\"$SLAVEIPS\"" > /config/donoteditthisfile.conf && \
    /config/distribute/distribute.sh
  else
    echo -e "ORIGURL=\"$URL\" ORIGDHLEVEL=\"$DHLEVEL\" ORIGVALIDATOR=\"$VALIDATOR\" ORIGVALIDATORIP=\"$VALIDATORIP\" ORIGSLAVEIPS=\"$ORIGSLAVEIPS\"" > /config/donoteditthisfile.conf
    sleep 1
    /app/le-renew.sh
    # check if new IPs are added to slaves, distribute if necessary
    if [ ! "$ORIGSLAVEIPS" = "$SLAVEIPS" ]; then
      echo -e "ORIGURL=\"$URL\" ORIGDHLEVEL=\"$DHLEVEL\" ORIGVALIDATOR=\"$VALIDATOR\" ORIGVALIDATORIP=\"$VALIDATORIP\" ORIGSLAVEIPS=\"$SLAVEIPS\"" > /config/donoteditthisfile.conf
      /config/distribute/distribute.sh
    fi      
  fi
# if server is not the validator
else
  # if certs don't exist, stop the container
  if [ ! -f "/config/keys/letsencrypt/fullchain.pem" ]; then
    echo "Recreate the validator container with this machine's IP, then restart this container after certs are copied"
    chown -R abc:abc /config
    exit 1
  fi
fi
  

# saving new variables
echo -e "ORIGURL=\"$URL\" ORIGDHLEVEL=\"$DHLEVEL\" ORIGVALIDATOR=\"$VALIDATOR\" ORIGVALIDATORIP=\"$VALIDATORIP\" ORIGSLAVEIPS=\"$SLAVEIPS\"" > /config/donoteditthisfile.conf

# logfiles needed by fail2ban
[[ ! -f /config/log/nginx/error.log ]] && \
	touch /config/log/nginx/error.log
[[ ! -f /config/log/nginx/access.log ]] && \
	touch /config/log/nginx/access.log

# permissions
chown -R abc:abc \
	/config
chmod -R 0644 /etc/logrotate.d

# Start fail2ban
fail2ban-client -x start
